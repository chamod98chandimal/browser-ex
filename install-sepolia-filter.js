#!/usr/bin/env node

/**
 * MetaMask Sepolia-Only Filter Installer
 * 
 * This script automatically modifies your MetaMask extension to show only Sepolia network
 * 
 * Usage: node install-sepolia-filter.js
 */

const fs = require('fs');
const path = require('path');

const METAMASK_DIR = './metamask-chrome-12.4.0';
const BACKUP_DIR = './metamask-backup';

console.log('ü¶ä MetaMask Sepolia-Only Filter Installer');
console.log('==========================================');

// Create backup directory
function createBackup() {
  console.log('üì¶ Creating backup...');
  
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }

  const filesToBackup = [
    'manifest.json',
    'common-8.js',
    'common-0.js',
    'background-0.js',
    'scripts/contentscript.js'
  ];

  filesToBackup.forEach(file => {
    const sourcePath = path.join(METAMASK_DIR, file);
    const backupPath = path.join(BACKUP_DIR, file);
    
    if (fs.existsSync(sourcePath)) {
      const backupDir = path.dirname(backupPath);
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      fs.copyFileSync(sourcePath, backupPath);
      console.log(`‚úÖ Backed up ${file}`);
    } else {
      console.log(`‚ö†Ô∏è  File not found: ${file}`);
    }
  });
}

// Update manifest.json
function updateManifest() {
  console.log('üìù Updating manifest.json...');
  
  const manifestPath = path.join(METAMASK_DIR, 'manifest.json');
  if (!fs.existsSync(manifestPath)) {
    console.error('‚ùå manifest.json not found');
    return false;
  }

  const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));
  
  // Add sepolia-only-filter.js to content scripts
  if (manifest.content_scripts && manifest.content_scripts[0]) {
    const scripts = manifest.content_scripts[0].js;
    if (!scripts.includes('scripts/sepolia-only-filter.js')) {
      scripts.push('scripts/sepolia-only-filter.js');
      console.log('‚úÖ Added sepolia-only-filter.js to content scripts');
    }
  }

  fs.writeFileSync(manifestPath, JSON.stringify(manifest, null, 2));
  return true;
}

// Create the sepolia filter script
function createSepoliaFilter() {
  console.log('üîß Creating Sepolia filter script...');
  
  const filterScript = `/**
 * Sepolia-Only Network Filter for MetaMask
 * Auto-generated by install-sepolia-filter.js
 */

(function() {
  'use strict';

  const SEPOLIA_CHAIN_ID = '0xaa36a7';
  console.log('üü£ Sepolia-only filter activated');

  function filterNetworks() {
    // Hide non-Sepolia networks
    const networkItems = document.querySelectorAll(
      '.multichain-network-list-item, ' +
      '.networks-tab__networks-list-item, ' +
      '.network-dropdown-item, ' +
      '[data-testid*="network-"]'
    );
    
    networkItems.forEach(item => {
      const text = item.textContent.toLowerCase();
      if (!text.includes('sepolia') && !text.includes('11155111')) {
        item.style.display = 'none';
      }
    });

    // Force enable test networks
    const testToggle = document.querySelector('[data-testid="advanced-setting-show-testnet-conversion"] input');
    if (testToggle && !testToggle.checked) {
      testToggle.click();
    }
  }

  // Apply filter immediately and on changes
  filterNetworks();
  
  const observer = new MutationObserver(() => {
    setTimeout(filterNetworks, 100);
  });
  
  observer.observe(document.body, { childList: true, subtree: true });
  setInterval(filterNetworks, 3000);

})();`;

  const scriptsDir = path.join(METAMASK_DIR, 'scripts');
  if (!fs.existsSync(scriptsDir)) {
    fs.mkdirSync(scriptsDir, { recursive: true });
  }

  const filterPath = path.join(scriptsDir, 'sepolia-only-filter.js');
  fs.writeFileSync(filterPath, filterScript);
  console.log('‚úÖ Created sepolia-only-filter.js');
}

// Modify built-in networks in key files
function modifyBuiltInNetworks() {
  console.log('üîß Modifying built-in network configurations...');

  const files = [
    'common-8.js',
    'common-0.js',
    'background-0.js',
    'scripts/contentscript.js'
  ];

  files.forEach(file => {
    const filePath = path.join(METAMASK_DIR, file);
    if (fs.existsSync(filePath)) {
      let content = fs.readFileSync(filePath, 'utf8');
      
      // Replace BUILT_IN_NETWORKS to include only Sepolia
      // This is a simplified approach - in practice, you'd need more sophisticated regex
      const sepoliaOnlyPattern = /BUILT_IN_NETWORKS=\{[^}]+\}/g;
      const sepoliaReplacement = 'BUILT_IN_NETWORKS={[o.SEPOLIA]:{chainId:s.SEPOLIA,ticker:ot[o.SEPOLIA],blockExplorerUrl:`https://${o.SEPOLIA}.etherscan.io`}}';
      
      if (content.match(sepoliaOnlyPattern)) {
        content = content.replace(sepoliaOnlyPattern, sepoliaReplacement);
        fs.writeFileSync(filePath, content);
        console.log(`‚úÖ Modified ${file}`);
      } else {
        console.log(`‚ö†Ô∏è  Pattern not found in ${file}`);
      }
    }
  });
}

// Main installation function
function install() {
  try {
    // Check if MetaMask directory exists
    if (!fs.existsSync(METAMASK_DIR)) {
      console.error(`‚ùå MetaMask directory not found: ${METAMASK_DIR}`);
      console.log('Please ensure the MetaMask extension is extracted in the current directory');
      return;
    }

    console.log('üîç Found MetaMask extension directory');
    
    // Create backup
    createBackup();
    
    // Create the filter script
    createSepoliaFilter();
    
    // Update manifest
    if (updateManifest()) {
      console.log('‚úÖ Manifest updated successfully');
    }
    
    // Modify built-in networks (optional, more invasive)
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });
    
    readline.question('Do you want to modify core network files? (y/N): ', (answer) => {
      if (answer.toLowerCase() === 'y') {
        modifyBuiltInNetworks();
      }
      
      console.log('\\nüéâ Installation complete!');
      console.log('\\nNext steps:');
      console.log('1. Load the modified extension in Chrome');
      console.log('2. Go to chrome://extensions/');
      console.log('3. Enable Developer mode');
      console.log('4. Click "Load unpacked" and select the metamask-chrome-12.4.0 folder');
      console.log('5. The extension should now show only Sepolia network');
      console.log('\\nüìÅ Backup created in:', BACKUP_DIR);
      
      readline.close();
    });

  } catch (error) {
    console.error('‚ùå Installation failed:', error.message);
    console.log('\\nüîÑ To restore from backup:');
    console.log(`cp -r ${BACKUP_DIR}/* ${METAMASK_DIR}/`);
  }
}

// Run installation
install(); 